[gd_scene load_steps=12 format=2]

[ext_resource path="res://water/lakesurface.gd" type="Script" id=1]
[ext_resource path="res://water/noiseTexture.png" type="Texture" id=2]
[ext_resource path="res://water/watersound.ogg" type="AudioStream" id=3]

[sub_resource type="Shader" id=1]
resource_local_to_scene = true
code = "shader_type spatial;
render_mode unshaded;

uniform sampler2D refl_tx;
uniform sampler2D noise_tx;

uniform vec2 wave_amp = vec2(0.04, 0.05);
uniform vec2 wave_freq = vec2(1.0, 2.5);
uniform vec2 time_factor = vec2(2.0, 3.0);

// Let's allow for a disturbance in the water to be modelled.
// Location is in mesh-relative space. 0,0 is the center of the mesh.
uniform vec2 disturb_location = vec2(0.0, 0.0);
uniform float disturb_magnitude = 0.01;
uniform float disturb_freq = 3.0;

varying float height;

void fragment() {
	// blur base texture
	vec3 base_sample = texture(refl_tx, vec2(1.0 - SCREEN_UV.x, SCREEN_UV.y)).rgb;
	vec2 offset = texture(noise_tx, vec2(1.0 - SCREEN_UV.x, SCREEN_UV.y)).gb;
	vec3 second_sample = texture(refl_tx, mix(vec2(1.0 - SCREEN_UV.x, SCREEN_UV.y), offset, 0.5)).rgb;
	vec3 sample = mix(base_sample, second_sample, 0.25 *sin(TIME * time_factor.x) + .25);
	
	float fresnel_approx = sqrt(1.0 - dot(NORMAL, VIEW));
	vec3 base_albedo = sample * (1.0 * fresnel_approx);
	
	// tint base blue
	//base_albedo = vec3(base_albedo.r, base_albedo.g, base_albedo.b + 0.1);
	
	// make high water appear as flat white
	//float cap = step(0.05, height); // a > b[i] ? 0.0 : 1.0
	//ALBEDO = mix(base_albedo, vec3(0.9, 0.9, 1.0), cap);
	float h_steps = trunc(height * 20.0) / 10.0;
	base_albedo = mix(base_albedo, vec3(base_albedo.x*1.4, base_albedo.y*1.4, 1.0), h_steps);
	ALBEDO = base_albedo;
	RIM = 0.2;
	ROUGHNESS = 0.2 * (1.0 - fresnel_approx);
	METALLIC = 0.0;
}

// This is the height of the water at the disturbance.
// It will get mixed into the total height.
float disturbance_height(vec2 pos, vec2 world_pos, float time) {
	// Now handle a disturbance, if any.
	// This is done with a ripple effect, but the center of it needs
	// to be able to be offset.
	float dist = distance(pos + disturb_location, vec2(0.0, 0.0));
	// Frequency drops the further away we get from center.
	float ripples = sin(dist * disturb_freq - time * time_factor.x);
	// So does magnitude!
	ripples = smoothstep(-1.0, 1.5, ripples / dist);
	
	return ripples * disturb_magnitude;
}

// This the total height of the water, given uv pos and time variable
float find_height(vec2 pos, vec2 world_pos, float time) {
	// Smooth sine waves
	float waves = (wave_amp.x * sin(pos.x * wave_freq.x + time * time_factor.x)) + (wave_amp.y * sin(pos.y * wave_freq.y  + time * time_factor.y));
	// Some tiling noise to break it up a bit
	float noise = texture(noise_tx, time * pos / 200.0).x;
	// Let's add a plunk.
	float ripple = disturbance_height(pos, world_pos, time);
	
	return noise * waves + ripple;
}

void vertex() {
	vec2 wrld = (CAMERA_MATRIX * vec4(VERTEX, 1.0)).xz;
	height = find_height(VERTEX.xz, wrld, TIME);
	VERTEX.y += height;
	
	TANGENT = normalize(vec3(0.0, find_height(VERTEX.xz + vec2(0.0, 0.2), wrld + vec2(0.0, 0.2), TIME) - find_height(VERTEX.xz + vec2(0.0, -0.2), wrld + vec2(0.0, -0.2), TIME), 0.4));
	BINORMAL = normalize(vec3(0.4, find_height(VERTEX.xz + vec2(0.2, 0.0), wrld + vec2(0.2, 0.0), TIME) - find_height(VERTEX.xz + vec2(-0.2, 0.0), wrld + + vec2(-0.2, 0.0), TIME), 0.0));
	NORMAL = cross(TANGENT, BINORMAL);
}"

[sub_resource type="Gradient" id=2]
colors = PoolColorArray( 0.0392157, 0, 0.117647, 1, 0, 0.0470588, 0.0823529, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/wave_amp = Vector2( 0.04, 0.05 )
shader_param/wave_freq = Vector2( 1, 2.5 )
shader_param/time_factor = Vector2( 2, 3 )
shader_param/disturb_location = Vector2( 4, 4 )
shader_param/disturb_magnitude = 0.2
shader_param/disturb_freq = 3.0
shader_param/refl_tx = SubResource( 3 )
shader_param/noise_tx = ExtResource( 2 )

[sub_resource type="PlaneMesh" id=5]
resource_local_to_scene = true
material = SubResource( 4 )
size = Vector2( 60, 40 )
subdivide_width = 64
subdivide_depth = 64

[sub_resource type="SpatialMaterial" id=6]
albedo_color = Color( 0.0156863, 0.0784314, 0.156863, 1 )

[sub_resource type="PlaneMesh" id=7]
material = SubResource( 6 )
size = Vector2( 60, 40 )

[sub_resource type="Environment" id=8]
background_mode = 2

[node name="lakesurface" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
mesh = SubResource( 5 )
material/0 = null
script = ExtResource( 1 )
real_camera = NodePath("../RealCamera")

[node name="Viewport" type="Viewport" parent="MeshInstance"]
size = Vector2( 64, 64 )

[node name="Camera" type="Camera" parent="MeshInstance/Viewport"]
transform = Transform( 1, 0, 0, 0, 0.896741, -0.442555, 0, 0.442555, 0.896741, 0.857219, 4.31637, 0.630562 )
current = true

[node name="DummyCam" type="Spatial" parent="MeshInstance"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1.59425, 0 )

[node name="MeshInstance" type="MeshInstance" parent="MeshInstance"]
mesh = SubResource( 7 )
material/0 = null

[node name="RealCamera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.857886, 0.513841, 0, -0.513841, 0.857886, -1.58412, 4.92431, 7.17466 )
environment = SubResource( 8 )

[node name="AudioStreamPlayer3D" type="AudioStreamPlayer3D" parent="."]
stream = ExtResource( 3 )
unit_db = 10.0
unit_size = 2.0
autoplay = true

[gd_scene load_steps=10 format=2]

[ext_resource path="res://mesh/Tree_01.obj" type="ArrayMesh" id=1]
[ext_resource path="res://mesh/Tent_01.obj" type="ArrayMesh" id=2]
[ext_resource path="res://mesh/Campfire_01.obj" type="ArrayMesh" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends Navigation

# Player Walking Speed
const SPEED = 4.0

#Navigation Points
var navigation_begin = Vector3()
var navigation_end = Vector3()

#Line Drawing Material
var line_material = SpatialMaterial.new()

#Navigation Path
var path = []
var draw_path = true


# Called when the node enters the scene tree for the first time.
func _ready():
	
	#Process user input
	set_process_input(true)
	
	#Set up the material for the line
	line_material.flags_unshaded = true
	line_material.flags_use_point_size = true
	line_material.albedo_color = Color.antiquewhite

func _process(delta):
	
	#Is there anything left of the path?
	if path.size() > 1:
		
		#Distance to walk
		var walk_distance = delta * SPEED
		
		#Direction to look
		var look_direction = Vector3.UP
		
		#While we still have a distance left to walk...
		while walk_distance > 0 and path.size() >= 2:
			
			#Where to start on this segment of the path
			var path_start = path[path.size()-1]
			var path_end = path[path.size()-2]
			
			#What direction are we walking?
			look_direction = (path_end - path_start).normalized()
			
			#What is the distance of this segment
			var segment_length = path_start.distance_to(path_end)
			
			#Are we stepping so far we skip the segment?
			if segment_length <= walk_distance:
				#We need to shorten the walk distance and move to the next segment
				path.remove(path.size()-1)
				walk_distance -= segment_length
			else:
				#Move the starting point to be the end of the step
				path[path.size()-1] = path_start.linear_interpolate(path_end, walk_distance/segment_length)
				break;
			
		#Get the character's position on the path
		var character_position = path[path.size()-1]
		
		#Make sure the direction we're facing does not adjust in the Y axis
		look_direction.y = 0
		
		var character_transform = Transform()
		character_transform.origin = character_position
		character_transform = character_transform.looking_at(character_position + look_direction, Vector3.UP)
		get_node(\"Character\").set_transform(character_transform)
	
		if path.size() < 2:
			path = []
			set_process(false)
		
	else:
		#Nothing left to do until the next point is clicked!
		set_process(false)

func _input(event):
	
	#Poll for left click input
	if event is InputEventMouseButton and event.button_index == BUTTON_LEFT and event.pressed:
		
		#Grab the starting point for the click (at the camera itself)
		var from_point = get_node(\"Camera\").project_ray_origin(event.position)
		var to_point = from_point + get_node(\"Camera\").project_ray_normal(event.position) * 100
		
		navigation_begin = get_closest_point(get_node(\"Character\").get_translation())
		navigation_end = get_closest_point_to_segment(from_point, to_point)
		_update_path()

func _update_path():
	
	#Get the path out of this navigation
	path = Array(get_simple_path(navigation_begin, navigation_end, true))
	path.invert()
	
	set_process(true)
	
	#Draw the path that we are navigating
	if draw_path:
		var line_draw = get_node(\"ImmediateGeometry\")
		line_draw.set_material_override(line_material)
		line_draw.clear()
		
		#Begin drawing the line verticies
		line_draw.begin(Mesh.PRIMITIVE_POINTS)
		line_draw.add_vertex(navigation_begin)
		line_draw.add_vertex(navigation_end)
		line_draw.end()
		
		#Begin drawing the line itself
		line_draw.begin(Mesh.PRIMITIVE_LINES)
		
		#Go over each point in the path
		for point in path:
			#Add a vertex to the line
			line_draw.add_vertex(point)
		line_draw.end()
"

[sub_resource type="CapsuleMesh" id=2]
radius = 0.25

[sub_resource type="NavigationMesh" id=3]
vertices = PoolVector3Array( -3.55364, 0.318805, -1.0364, -2.35364, 0.318805, 0.163605, 1.24636, 0.318805, -1.6364, -3.55364, 0.318805, -1.0364, 1.24636, 0.318805, -1.6364, 1.24636, 0.318805, -3.7364, -4.45364, 0.318805, -1.0364, -9.55364, 0.318805, 1.3636, -6.85364, 0.318805, 1.3636, -4.45364, 0.318805, -1.0364, 1.24636, 0.318805, -3.7364, 2.44636, 0.318805, -4.0364, 2.44636, 0.318805, -9.4364, -9.55364, 0.318805, -9.4364, -9.55364, 0.318805, 1.3636, -4.45364, 0.318805, -1.0364, 1.24636, 0.318805, -3.7364, 2.44636, 0.318805, -9.4364, 2.44636, 0.318805, -9.4364, 2.44636, 0.318805, -4.0364, 3.64636, 0.318805, -4.0364, 3.64636, 0.318805, -4.0364, 3.94636, 0.318805, -2.5364, 9.64636, 0.318805, -2.5364, 3.64636, 0.318805, -4.0364, 9.64636, 0.318805, -2.5364, 9.64636, 0.318805, -9.4364, 2.44636, 0.318805, -9.4364, 2.14636, 0.318805, -1.0364, 2.14636, 0.318805, 1.9636, 2.74636, 0.318805, 2.2636, 3.64636, 0.318805, -1.0364, 9.64636, 0.318805, -2.5364, 3.94636, 0.318805, -2.5364, 3.64636, 0.318805, -1.0364, 3.64636, 0.318805, -1.0364, 2.74636, 0.318805, 2.2636, 2.44636, 0.318805, 3.7636, 9.64636, 0.318805, 4.0636, 9.64636, 0.318805, -2.5364, 0.94636, 0.318805, 2.2636, 2.14636, 0.318805, 1.9636, 2.14636, 0.318805, -1.0364, 1.24636, 0.318805, -1.6364, -2.35364, 0.318805, 0.163605, -1.45364, 0.318805, 1.0636, 0.94636, 0.318805, 3.4636, 0.94636, 0.318805, 2.2636, -1.45364, 0.318805, 1.9636, -4.15364, 0.318805, 4.0636, 0.94636, 0.318805, 2.2636, -1.45364, 0.318805, 1.0636, -1.45364, 0.318805, 1.9636, 1.84636, 0.318805, 3.7636, 0.94636, 0.318805, 3.4636, -4.15364, 0.318805, 4.0636, -4.15364, 0.318805, 9.4636, 1.84636, 0.318805, 9.4636, -6.85364, 0.318805, 1.9636, -6.85364, 0.318805, 1.3636, -9.55364, 0.318805, 1.3636, -4.15364, 0.318805, 4.0636, -6.85364, 0.318805, 1.9636, -9.55364, 0.318805, 1.3636, -9.55364, 0.318805, 9.4636, -4.15364, 0.318805, 9.4636, 2.44636, 0.318805, 3.7636, 1.84636, 0.318805, 3.7636, 1.84636, 0.318805, 9.4636, 9.64636, 0.318805, 9.4636, 9.64636, 0.318805, 4.0636 )
polygons = [ PoolIntArray( 2, 1, 0 ), PoolIntArray( 6, 5, 3 ), PoolIntArray( 3, 5, 4 ), PoolIntArray( 9, 8, 7 ), PoolIntArray( 12, 11, 10 ), PoolIntArray( 17, 16, 13 ), PoolIntArray( 13, 16, 15 ), PoolIntArray( 13, 15, 14 ), PoolIntArray( 20, 19, 18 ), PoolIntArray( 23, 22, 21 ), PoolIntArray( 27, 26, 24 ), PoolIntArray( 24, 26, 25 ), PoolIntArray( 31, 30, 28 ), PoolIntArray( 28, 30, 29 ), PoolIntArray( 34, 33, 32 ), PoolIntArray( 39, 38, 35 ), PoolIntArray( 35, 38, 36 ), PoolIntArray( 36, 38, 37 ), PoolIntArray( 45, 44, 40 ), PoolIntArray( 40, 44, 41 ), PoolIntArray( 41, 44, 42 ), PoolIntArray( 42, 44, 43 ), PoolIntArray( 49, 48, 46 ), PoolIntArray( 46, 48, 47 ), PoolIntArray( 52, 51, 50 ), PoolIntArray( 57, 56, 53 ), PoolIntArray( 53, 56, 54 ), PoolIntArray( 54, 56, 55 ), PoolIntArray( 60, 59, 58 ), PoolIntArray( 65, 64, 61 ), PoolIntArray( 61, 64, 62 ), PoolIntArray( 62, 64, 63 ), PoolIntArray( 70, 69, 66 ), PoolIntArray( 66, 69, 67 ), PoolIntArray( 67, 69, 68 ) ]

[sub_resource type="GDScript" id=4]
script/source = "extends OmniLight
tool

onready var noise = NoiseTexture.new()


onready var energyBase = 0.7
onready var rangeBase = 7.7

onready var energyRange = Vector2(self.energyBase - .1, self.energyBase + .1)
onready var rangeRange = Vector2(self.rangeBase - 0.5, self.rangeBase + 0.5)

var x_position = 0
var flicker_loop_time = 10

# Called when the node enters the scene tree for the first time.
func _ready():
	
	set_process(true)
	
	noise.noise = OpenSimplexNoise.new()
	noise.width = 100
	noise.height = 30
	noise.seamless = true
	

func _process(delta):
	
	#Flicker our light
	x_position += 100/flicker_loop_time  * delta
	if x_position > 100:
		x_position -= 100
	
	#Set the energy
	var energyNormalOffset = noise.noise.get_noise_2dv(Vector2(x_position, 0))
	var energyOffset = lerp(energyRange.x, energyRange.y, energyNormalOffset)
	self.light_energy = energyOffset
	
	#Set the energy
	var rangeNormalOffset = noise.noise.get_noise_2dv(Vector2(x_position, 30))
	var rangeOffset = lerp(rangeRange.x, rangeRange.y, rangeNormalOffset)
	self.omni_range = rangeOffset
	
	pass
"

[sub_resource type="PlaneMesh" id=5]

[sub_resource type="Environment" id=6]

[node name="Spatial" type="Navigation"]
script = SubResource( 1 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.790978, 0.611845, 0, -0.611845, 0.790978, 0, 6.26306, 8.02424 )

[node name="Character" type="Position3D" parent="."]
transform = Transform( 0.99992, 0, -0.0126708, 0, 1, 0, 0.0126708, 0, 0.99992, 0, 0.0327385, 3.26603 )

[node name="MeshInstance" type="MeshInstance" parent="Character"]
transform = Transform( 1, 0, 5.55112e-17, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0, 0.740014, 0 )
mesh = SubResource( 2 )
material/0 = null

[node name="ImmediateGeometry" type="ImmediateGeometry" parent="."]

[node name="NavigationMeshInstance2" type="NavigationMeshInstance" parent="."]
navmesh = SubResource( 3 )

[node name="Terrain" type="CSGCombiner" parent="NavigationMeshInstance2"]

[node name="Ground" type="CSGBox" parent="NavigationMeshInstance2/Terrain"]
transform = Transform( 0.999999, 0.000864629, -0.000722092, -0.000864847, 1, -0.00031343, 0.000721832, 0.000314029, 1, 0, 0, 0 )
width = 20.2927
height = 0.138554
depth = 20.0581

[node name="CSGBox" type="CSGBox" parent="NavigationMeshInstance2/Terrain"]
transform = Transform( 1, 0, 0, 0, -0.999998, -0.00188512, 0, 0.00188512, -0.999998, 2.59067, 0, -2.58502 )
operation = 2
width = 1.87823
height = 0.888472
depth = 2.07644

[node name="CSGBox2" type="CSGBox" parent="NavigationMeshInstance2/Terrain"]
transform = Transform( 0.711131, 0.00132535, -0.703058, 0, -0.999998, -0.00188512, -0.70306, 0.00134057, -0.71113, -4.11968, 0, 1.59554 )
operation = 2
width = 3.39231
height = 0.888472
depth = 3.34035

[node name="CSGBox3" type="CSGBox" parent="NavigationMeshInstance2/Terrain"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.9632, 0, 2.78916 )
operation = 2
width = 0.870687
height = 0.65224
depth = 1.02221

[node name="Tree_01" type="MeshInstance" parent="."]
transform = Transform( -0.795572, 0.0697124, -0.601834, -0.0151111, 0.990766, 0.134739, 0.60567, 0.116289, -0.787172, 2.70226, 0.602282, -3.42079 )
mesh = ExtResource( 1 )
material/0 = null
material/1 = null
material/2 = null
material/3 = null
material/4 = null

[node name="Tent_01" type="MeshInstance" parent="."]
transform = Transform( 0.711131, 0, 0.70306, 0, 1, 0, -0.70306, 0, 0.711131, -4.10501, 0.226686, 3.76497 )
mesh = ExtResource( 2 )
material/0 = null
material/1 = null
material/2 = null
material/3 = null
material/4 = null

[node name="Campfire_01" type="MeshInstance" parent="."]
transform = Transform( 0.711131, 0, 0.70306, 0, 1, 0, -0.70306, 0, 0.711131, 1.95177, 0.0674281, 3.32041 )
mesh = ExtResource( 3 )
material/0 = null
material/1 = null
material/2 = null
material/3 = null
material/4 = null
material/5 = null
material/6 = null
material/7 = null
material/8 = null
material/9 = null
material/10 = null

[node name="FireLight" type="OmniLight" parent="Campfire_01"]
transform = Transform( 0.711131, 0, -0.70306, 0, 1, 0, 0.70306, 0, 0.711131, 0.326896, 2.01922, -0.500452 )
light_color = Color( 0.607843, 0.447059, 0.105882, 1 )
light_energy = 0.552379
light_specular = 0.55
shadow_enabled = true
omni_range = 7.20561
omni_attenuation = 0.615576
script = SubResource( 4 )

[node name="RemoteTransform" type="RemoteTransform" parent="Campfire_01"]
transform = Transform( 0.711131, 0, -0.70306, 0, 1, 0, 0.70306, 0, 0.711131, 0.381624, -0.0674281, -0.36975 )
remote_path = NodePath("../../NavigationMeshInstance2/Terrain/CSGBox3")

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 10.6582, 0, 0, 0, 9.75307, 0, 0, 0, 9.75307, 0, 0.0697331, 0 )
mesh = SubResource( 5 )
material/0 = null

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 6 )
